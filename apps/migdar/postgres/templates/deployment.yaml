{{ if .Values.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  strategy:
    type: Recreate
  {{ if .Values.enableAntiAffinity }}
  affinity:
    # ensure postgres won't be on the same node as elasticsearch, pipelines or nginx
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - elasticsearch
            - pipelines
            - nginx
        topologyKey: "kubernetes.io/hostname"
  {{ end }}
  template:
    metadata:
      labels:
        app: postgres
    spec:
      {{ if .Values.nodeSelector }}
      nodeSelector:
        {{ .Values.nodeSelector }}
      {{ end }}
      {{ if .Values.kubeIpDnsUpdaterSecret }}
      serviceAccountName: {{ .Values.kubeIpDnsUpdaterServiceAccountName | quote }}
      {{ end }}
      initContainers:
      - name: init
        image: alpine
        command: [ls, "-lah", "/var/lib/postgresql/data"]
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          # postgres doesn't let you use the root of a disk (it complaints about having lost+found directory)
          subPath: dbdata
      {{ if .Values.kubeIpDnsUpdaterSecret }}
      - name: dns
        image: orihoch/kube-ip-dns-updater:v0.0.9
        envFrom:
        - secretRef:
            name: {{ .Values.kubeIpDnsUpdaterSecret | quote }}
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      {{ end }}
      containers:
      - name: postgres
        image: postgres:9.6.3-alpine
        ports:
        - containerPort: 5432
          {{ if .Values.enableHostPort }}hostPort: 5432{{ end }}
        resources: {{ .Values.resources }}
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.dbSecretName | quote }}
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          # postgres doesn't let you use the root of a disk (it complaints about having lost+found directory)
          subPath: dbdata
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgres2
      # {{ if .Values.gcePersistentDiskName }}
      #   persistentVolumeClaim:
      #     claimName: {{ .Release.Namespace }}-{{ .Values.gcePersistentDiskName }}-gcepd
      # {{ else if .Values.nfsServer }}
      #   nfs:
      #     server: {{ .Values.nfsServer | quote }}
      #     path: {{ .Values.nfsPath | quote }}
      # {{ else }}
      #   {{ .Values.global.persistentDataVolume.type }}: {
      #     {{ if eq .Values.global.persistentDataVolume.type "hostPath" }}
      #     "path": "{{ .Values.global.persistentDataVolume.basePath }}/postgres",
      #     "type": "DirectoryOrCreate"
      #     {{ end }}
      #   }
      # {{ end }}
{{ end }}
